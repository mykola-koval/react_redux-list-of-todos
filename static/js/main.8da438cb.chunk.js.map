{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","api/todos.ts","api/user.ts","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","LoadTodosAction","payload","type","LoadUserAction","initialState","todos","user","store","createStore","state","action","getTodosSelector","getUserSelector","CurrentUser","dispatch","useDispatch","useSelector","className","id","name","email","phone","onClick","API_URL","getTodos","a","fetch","response","json","deleteTodo","todoId","method","getUser","userId","TodoList","useState","selectedUserId","setSelectedUserId","searchQuery","setSearchQuery","filterBy","setFilterBy","useEffect","loadTodosFromServer","todosFromServer","selectUser","userFromServer","preparedTodos","useMemo","filter","todo","title","includes","completed","removeTodo","placeholder","value","onChange","event","input","target","map","classNames","htmlFor","checked","readOnly","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8da438cb.chunk.js","sourcesContent":["export const LOAD_TODOS = 'LOAD_TODOS';\nexport const LOAD_USER = 'LOAD_USER';\n\nexport const LoadTodosAction = (payload: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload,\n});\n\nexport const LoadUserAction = (payload: User | null) => ({\n  type: LOAD_USER,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { LOAD_TODOS, LOAD_USER } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n\nexport default store;\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getUserSelector = (state: State) => state.user;\n","import './CurrentUser.scss';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSelector } from '../../store/selectors';\nimport { LoadUserAction } from '../../store/actions';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUserSelector);\n\n  const clearUser = () => {\n    dispatch(LoadUserAction(null));\n  };\n\n  return (\n    user && (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"button button--centered\"\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    )\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/todos/';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(API_URL);\n\n  return response.json();\n}\n\nexport async function deleteTodo(todoId: number) {\n  await fetch(`${API_URL}${todoId}`, {\n    method: 'DELETE',\n  });\n\n  return getTodos();\n}\n","const API_URL = 'https://mate.academy/students-api/users/';\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}${userId}`);\n\n  return response.json();\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteTodo, getTodos } from '../../api/todos';\nimport { LoadTodosAction, LoadUserAction } from '../../store/actions';\nimport { getTodosSelector } from '../../store/selectors';\nimport './TodoList.scss';\nimport { getUser } from '../../api/user';\n\nexport const TodoList: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterBy, setFilterBy] = useState('nofilter');\n\n  const dispatch = useDispatch();\n\n  const todos = useSelector(getTodosSelector);\n\n  useEffect(() => {\n    const loadTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(LoadTodosAction(todosFromServer));\n    };\n\n    loadTodosFromServer();\n  }, []);\n\n  const selectUser = async (userId: number) => {\n    if (selectedUserId !== userId) {\n      const userFromServer = await getUser(userId);\n\n      setSelectedUserId(userId);\n\n      dispatch(LoadUserAction(userFromServer));\n    }\n  };\n\n  let preparedTodos = [...todos];\n\n  useMemo(() => {\n    if (searchQuery) {\n      preparedTodos = [...todos].filter(todo => todo.title.includes(searchQuery));\n    }\n\n    if (filterBy !== 'nofilter') {\n      preparedTodos = filterBy === 'completed'\n        ? preparedTodos.filter(todo => todo.completed)\n        : preparedTodos.filter(todo => !todo.completed);\n    }\n  }, [searchQuery, filterBy]);\n\n  const handleSearchInput = (input: string) => {\n    setSearchQuery(input);\n  };\n\n  const removeTodo = async (todoId: number) => {\n    const todosFromServer = await deleteTodo(todoId);\n\n    dispatch(LoadTodosAction(todosFromServer));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__search\">\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          className=\"TodoList__searchbar\"\n          value={searchQuery}\n          onChange={event => handleSearchInput(event.target.value)}\n        />\n        <select\n          name=\"\"\n          id=\"\"\n          className=\"TodoList__selector\"\n          value={filterBy}\n          onChange={event => setFilterBy(event.target.value)}\n        >\n          <option value=\"nofilter\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {preparedTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n            >\n              <label htmlFor=\"isCompleted\">\n                <input\n                  id=\"isCompleted\"\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <div className=\"TodoList__button-container\">\n                <button\n                  className={classNames(\n                    'button',\n                    'TodoList__user-button',\n                    { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  {`User\\xa0#${todo.userId}`}\n                </button>\n\n                <button\n                  className={classNames(\n                    'button',\n                    'TodoList__user-button',\n                  )}\n                  type=\"button\"\n                  onClick={() => removeTodo(todo.id)}\n                >\n                  X\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import './App.scss';\nimport './styles/general.scss';\nimport { useSelector } from 'react-redux';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/TodoList';\nimport { getUserSelector } from './store/selectors';\n\nconst App = () => {\n  const user = useSelector(getUserSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {user\n            ? <CurrentUser />\n            : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}